
import argparse
from services.config_service import ConfigManager
from services.google_auth import GoogleAuth
from services.google_calendar import GoogleCalendarService
from services.last_run_service import RunTracker
from services.shedule_downloader import ScheduleDownloader
from utils.ics_parser import parse_ics_content
from utils.date_utils import get_week_range_from_events
from config.config import AUTH_MODE, LAST_RUN_FILE, UPDATE_INTERVAL_HOURS
from view.console_view import ConsoleUserInteraction

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--non-interactive', action='store_true',
                        help='–ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)')
    args = parser.parse_args()

    config_manager = ConfigManager()
    config = config_manager.load_config()
    
    tracker = RunTracker(file_path=LAST_RUN_FILE, interval_hours=UPDATE_INTERVAL_HOURS)
    if not tracker.should_run():
        print("üïí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –í—ã—Ö–æ–¥.")
        return
    
    credentials = GoogleAuth.get_credentials(AUTH_MODE)
    calendar_service = GoogleCalendarService(credentials)

    # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    if not config:
        if args.non_interactive:
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç–µ init.sh –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            return
        else:
            print("üìã –≠—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫. –ù–∞—Å—Ç—Ä–æ–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

            ui = ConsoleUserInteraction(calendar_service)

            # 1. –í—ã–±–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            calendar_id = ui.prompt_calendar_selection()
            
            # 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å
            weeks_ahead = ui.prompt_weeks_ahead()
            
            # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            config_manager.save_config(calendar_id, weeks_ahead)
            print(f"\nüíæ ID –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω\n")
    else:
        calendar_id, weeks_ahead = config
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–ª–µ–Ω–¥–∞—Ä—å (ID: {calendar_id[:30]}...)")
        print(f"üìÖ –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ {weeks_ahead} –Ω–µ–¥–µ–ª—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

    # –¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π calendar_id
    calendar_service.set_calendar_id(calendar_id)


    downloader = ScheduleDownloader()
    ics_contents = downloader.download_ics_for_weeks(weeks_ahead)

    if not ics_contents:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
    all_events = []
    for content in ics_contents:
        events = parse_ics_content(content)
        all_events.extend(events)

    if not all_events:
        print("‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
        return
    

    monday, sunday = get_week_range_from_events(all_events)
    print(f"üìÖ –û–±—â–∏–π –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {monday} ‚Äî {sunday}")

    # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    calendar_service.delete_events_in_week(monday, sunday)
    calendar_service.import_events(all_events)

    print("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

    tracker.mark_as_run()
    print("\n‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ last_run.txt!")

if __name__ == "__main__":
    main()