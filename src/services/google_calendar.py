from datetime import date, datetime
from googleapiclient.discovery import build
from config.config import  TAG

class GoogleCalendarService:
    def __init__(self, credentials):
        self.service = build("calendar", "v3", credentials=credentials)
        self._calendar_id = None  # –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ
        self.tag = TAG


    def set_calendar_id(self, calendar_id: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
        if not calendar_id or not isinstance(calendar_id, str):
            raise ValueError("ID –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
        self._calendar_id = calendar_id.strip()

    @property
    def calendar_id(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π ID –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –í—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."""
        if self._calendar_id is None:
            raise RuntimeError("calendar_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ set_calendar_id().")
        return self._calendar_id


    def get_writable_calendars(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å (owner/writer)."""
        try:
            calendar_list = self.service.calendarList().list().execute()
            calendars = calendar_list.get('items', [])
            return [
                cal for cal in calendars
                if cal.get('accessRole') in ('owner', 'writer')
            ]
        except Exception as e:
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π: {e}") from e

    def delete_events_in_week(self, week_start: date, week_end: date):
        time_min = datetime.combine(week_start, datetime.min.time()).isoformat() + 'Z'
        time_max = datetime.combine(week_end, datetime.max.time()).isoformat() + 'Z'

        print(f"üîç –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å {week_start} –ø–æ {week_end}...")

        events_result = self.service.events().list(
            calendarId=self.calendar_id,
            timeMin=time_min,
            timeMax=time_max,
            singleEvents=True,
            orderBy='startTime'
        ).execute()

        deleted = 0
        for event in events_result.get('items', []):
            if self.tag in str(event.get('description', '')):
                try:
                    self.service.events().delete(
                        calendarId=self.calendar_id,
                        eventId=event['id']
                    ).execute()
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    deleted += 1
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} —Å–æ–±—ã—Ç–∏–π.")


    def create_calendar(self, summary: str, time_zone: str = "Europe/Moscow"):
        if not summary or not summary.strip():
            raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        calendar_body = {
            'summary': summary.strip(),
            'timeZone': time_zone
        }
        try:
            created = self.service.calendars().insert(body=calendar_body).execute()
            return created['id']
        except Exception as e:
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å: {e}") from e

    def import_events(self, events):
        for event in events:
            try:
                self.service.events().insert(
                    calendarId=self.calendar_id,
                    body=event
                ).execute()
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {event['summary']}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {event['summary']}: {e}")